name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      dry_run:
        description: 'Dry run (skip publish, commits, tags)'
        required: false
        default: false
        type: boolean

  workflow_call:
    inputs:
      version_type:
        description: 'Version increment type (patch|minor|major)'
        required: true
        type: string
        default: 'patch'
      dry_run:
        description: 'Dry run (skip upload)'
        required: false
        type: boolean
        default: false
      spec_url:
        description: 'OpenAPI spec URL to baseline (optional)'
        required: false
        type: string
        default: 'https://api.amigo.ai/v1/openapi.json'

permissions:
  contents: write

jobs:
  # Reuse the existing test workflow
  test:
    uses: ./.github/workflows/test.yml
    with:
      skip_codecov: true
    secrets: inherit

  release:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Generate models
        run: |
          echo "ðŸ”„ Generating models from API spec..."
          node scripts/gen.mjs
          echo "âœ… Models generated successfully"

      - name: Resolve spec URL
        id: spec
        run: |
          SPEC_URL="${{ inputs.spec_url }}"
          if [ -z "$SPEC_URL" ]; then
            SPEC_URL="https://api.amigo.ai/v1/openapi.json"
          fi
          echo "spec_url=$SPEC_URL" >> $GITHUB_OUTPUT

      - name: Increment version
        id: new_version
        run: |
          echo "ðŸ”„ Incrementing ${{ inputs.version_type }} version..."
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            NEW_VERSION=$(npm version ${{ inputs.version_type }} --no-git-tag-version --dry-run)
            NEW_VERSION=${NEW_VERSION#v}
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "âœ… (dry-run) Version would be: ${{ steps.current_version.outputs.version }} â†’ $NEW_VERSION"
          else
            npm version ${{ inputs.version_type }} --no-git-tag-version
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "âœ… Version updated: ${{ steps.current_version.outputs.version }} â†’ $NEW_VERSION"
          fi

      - name: Build package
        run: |
          echo "ðŸ”„ Building package..."
          rm -rf dist/
          npm run build
          echo "âœ… Package built successfully"
          ls -la dist/

      - name: Pack tarball
        id: pack
        run: |
          echo "ðŸ”„ Creating npm pack tarball..."
          FILE=$(npm pack --silent)
          echo "file=$FILE" >> $GITHUB_OUTPUT
          echo "âœ… Tarball created: $FILE"
          ls -la "$FILE"

      - name: Publish to npm
        if: ${{ !inputs.dry_run }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "ðŸ”„ Publishing to npm..."
          FILE="${{ steps.pack.outputs.file }}"
          ACCESS_FLAG="--access public"
          PROV_FLAG=""
          if [ "${{ github.repository_visibility }}" = "public" ] && [ -n "${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" ]; then
            PROV_FLAG="--provenance"
          fi
          npm publish "$FILE" $PROV_FLAG $ACCESS_FLAG
          echo "âœ… Package published to npm"

      - name: Update OpenAPI baseline
        if: ${{ !inputs.dry_run }}
        run: |
          echo "ðŸ”„ Updating OpenAPI baseline from ${{ steps.spec.outputs.spec_url }}"
          mkdir -p specs
          curl -fSL -o specs/openapi-baseline.json "${{ steps.spec.outputs.spec_url }}"
          echo "âœ… Baseline updated at specs/openapi-baseline.json"

      - name: Commit version bump
        if: ${{ !inputs.dry_run }}
        run: |
          git add package.json package-lock.json src/generated specs/openapi-baseline.json || true
          git commit -m "Bump version to ${{ steps.new_version.outputs.version }}"
          git push origin HEAD

      - name: Create and push tag
        if: ${{ !inputs.dry_run }}
        run: |
          git tag -a "v${{ steps.new_version.outputs.version }}" -m "Release v${{ steps.new_version.outputs.version }}"
          git push origin "v${{ steps.new_version.outputs.version }}"

      - name: Create GitHub Release
        if: ${{ !inputs.dry_run }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: 'v${{ steps.new_version.outputs.version }}'
          name: 'Release v${{ steps.new_version.outputs.version }}'
          body: |
            ## Changes in v${{ steps.new_version.outputs.version }}

            This release was automatically created by the GitHub Actions release workflow.

            ### Package Information
            - Version: ${{ steps.new_version.outputs.version }}

            ### Installation
            npm install @amigo-ai/sdk
          draft: false
          files: |
            ${{ steps.pack.outputs.file }}

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ steps.new_version.outputs.version }}
          path: |
            dist/
            ${{ steps.pack.outputs.file }}
          retention-days: 30

      - name: Release Summary
        run: |
          echo "## ðŸŽ‰ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Version: ${{ steps.new_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Previous: ${{ steps.current_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Dry Run: ${{ inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "- Published: ${{ inputs.dry_run && 'skipped' || 'npm' }}" >> $GITHUB_STEP_SUMMARY
